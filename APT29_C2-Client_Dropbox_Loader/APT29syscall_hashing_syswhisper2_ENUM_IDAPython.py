import lief
import idc, idaapi

# malduck.ror(v, 8, 32) --> IDA __ROR4__(v, 8)
def SW2_ROR8(v): 
    return (v >> 8 | v << 24)

#hashing algorithm
def calc_hash(syscall:bytes) -> int:
    func_hash = 0x1A33AD97
    for i in range(0,len(syscall),1):
        partial_name = int.from_bytes(syscall[i:i+2], "little", signed=False)
        temp = (partial_name + SW2_ROR8(func_hash)) & 0xFFFFFFFF
        func_hash = (func_hash ^ temp) & 0xFFFFFFFF
    return func_hash

#filling dictionary
Syscall_hashes = {}
ntdll = lief.parse(r"C:\Windows\System32\ntdll.dll")
for export in ntdll.exported_functions:
    if export.name.startswith("Zw"):
        syscall_hash = calc_hash(export.name.encode('utf-8'))
        Syscall_hashes[hex(syscall_hash)] = export.name

#creating new ENUM in IDA
id = idc.add_enum(-1, "SyscallHashes_ntdll", idaapi.dec_flag())
for hash in Syscall_hashes.keys():
    idc.add_enum_member(id, Syscall_hashes[hash] , int(hash,16), -1)

print("ENUM SyscallHashes_ntdll created !!!")
print("Number of Syscalls added to ENUM: %d" % len(Syscall_hashes))




